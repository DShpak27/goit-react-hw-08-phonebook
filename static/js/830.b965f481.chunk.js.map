{"version":3,"file":"static/js/830.b965f481.chunk.js","mappings":"8MAGe,SAASA,IACpB,OACI,SAAC,KAAc,CACXC,SAAS,YACTC,UAAW,KAEXC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAkB,EAClBC,WAAS,EACTC,cAAc,EACdC,MAAM,SAGlB,C,mJCfaC,EAAWC,EAAAA,EAAAA,KAAW,kQAYtBC,EAAYD,EAAAA,EAAAA,EAAQ,yIAQpBE,GAAQF,EAAAA,EAAAA,GAAOG,EAAAA,EAAPH,CAAiB,2CAIzBI,EAAqBJ,EAAAA,EAAAA,IAAU,0F,wCCd7B,SAASK,IACpB,OAAoCC,EAAAA,EAAAA,UAAS,IAAG,eAAzCC,EAAU,KAAEC,EAAa,KAChC,GAAgCF,EAAAA,EAAAA,UAAS,IAAG,eAArCG,EAAQ,KAAEC,EAAW,KACtBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAoB,SAAAC,GACtB,GAAwB,UAApBA,EAAIC,OAAOC,KAGX,OAFAR,EAAcM,EAAIC,OAAOE,YACzBC,aAAaC,QAAQ,WAAYL,EAAIC,OAAOE,OAGxB,aAApBH,EAAIC,OAAOC,MACXN,EAAYI,EAAIC,OAAOE,MAG/B,GAEAG,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACNC,EAAgD,QAAnC,EAAGH,aAAaI,QAAQ,mBAAW,QAAI,GAC1Dd,EAAca,EAClB,GAAG,IAEH,IAkBME,EAAkB,WACpBf,EAAc,IACdE,EAAY,IACZQ,aAAaM,WAAW,WAC5B,EAEA,OACI,UAACzB,EAAQ,CAAC0B,aAAa,MAAMC,SAzBZ,SAAAZ,GACjBA,EAAIa,iBACJ,IAAMC,EAAOd,EAAIe,cACXC,EAAQF,EAAKG,SAASD,MAAMb,MAAMe,cAClCC,EAAWL,EAAKG,SAASE,SAAShB,MACxCN,GAASuB,EAAAA,EAAAA,IAAW,CAAEJ,MAAAA,EAAOG,SAAAA,KACxBE,SACAC,MAAK,kBAAMb,GAAiB,IAC5Bc,OAAM,kBACHC,EAAAA,GAAAA,MACI,iEACH,GAEb,EAYwD,WAChD,SAACrC,EAAS,UAAC,oCAEX,SAACC,EAAK,CACFqC,KAAK,QACLC,MAAM,SACNxB,KAAK,QACLyB,KAAK,OACLC,YAAY,SACZzB,MAAOV,EACPoC,SAAU9B,EACV+B,WAAY,CACRC,QAAS,wCACTC,MAAO,yFAIf,SAAC5C,EAAK,CACFqC,KAAK,QACLC,MAAM,WACNC,KAAK,WACLzB,KAAK,WACL0B,YAAY,WACZjB,aAAa,MACbR,MAAOR,EACPkC,SAAU9B,EACV+B,WAAY,CACRC,QAAS,QACTC,MAAO,4CAGf,UAAC1C,EAAkB,YACf,SAAC2C,EAAA,EAAM,CACHN,KAAK,SACLO,QAAQ,WACRT,KAAK,QACLU,UA9CcC,QAAQ3C,GAAcE,GA8CP,SAChC,WAGD,SAACsC,EAAA,EAAM,CACHC,QAAQ,WACRT,KAAK,QACLY,MAAM,YACNC,QAAS7B,EACT0B,UAtDaC,QAAQ3C,GAAcE,GAsDP,SAC/B,cAIL,SAACpB,EAAA,EAAiB,MAG9B,C,kBC9GagE,EAAOrD,EAAAA,EAAAA,KAAW,0JAQlBsD,GAAqBtD,EAAAA,EAAAA,GAAOuD,EAAAA,EAAPvD,CAAiB,0ECRpC,SAASwD,IACpB,OACI,SAACH,EAAI,WACD,SAACC,EAAkB,WACf,SAACjD,EAAS,OAI1B,C","sources":["components/AppToastContainer/AppToastContainer.jsx","components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.js","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function AppToastContainer() {\r\n    return (\r\n        <ToastContainer\r\n            position=\"top-right\"\r\n            autoClose={4500}\r\n            // hideProgressBar\r\n            newestOnTop={false}\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnFocusLoss={false}\r\n            draggable\r\n            pauseOnHover={false}\r\n            theme=\"light\"\r\n        />\r\n    );\r\n}\r\n","import styled from '@emotion/styled';\r\nimport { TextField } from '@mui/material';\r\n\r\nexport const FormBody = styled.form`\r\n    padding: 30px 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    row-gap: 15px;\r\n    border-radius: 10px;\r\n    background-color: #fff;\r\n\r\n    box-shadow: 0 0 0 1px rgba(3, 102, 214, 0.3) inset;\r\n`;\r\n\r\nexport const FormTitle = styled.p`\r\n    padding: 0 0 25px 0;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    line-height: 1;\r\n    color: #1976d2;\r\n`;\r\n\r\nexport const Input = styled(TextField)`\r\n    width: 400px;\r\n`;\r\n\r\nexport const FormButtonsWrapper = styled.div`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    column-gap: 15px;\r\n`;\r\n","import AppToastContainer from '../../components/AppToastContainer';\r\nimport { toast } from 'react-toastify';\r\nimport { Button } from '@mui/material';\r\nimport {\r\n    FormBody,\r\n    Input,\r\n    FormTitle,\r\n    FormButtonsWrapper,\r\n} from './LoginForm.styled';\r\nimport { loginThunk } from '../../redux/operations-auth';\r\nimport { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport default function LoginForm() {\r\n    const [emailValue, setEmailValue] = useState('');\r\n    const [pswValue, setPswValue] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const handleInputChange = evt => {\r\n        if (evt.target.name === 'email') {\r\n            setEmailValue(evt.target.value);\r\n            localStorage.setItem('logEmail', evt.target.value);\r\n            return;\r\n        }\r\n        if (evt.target.name === 'password') {\r\n            setPswValue(evt.target.value);\r\n            return;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const restoredEmail = localStorage.getItem('logEmail') ?? '';\r\n        setEmailValue(restoredEmail);\r\n    }, []);\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        const form = evt.currentTarget;\r\n        const email = form.elements.email.value.toLowerCase();\r\n        const password = form.elements.password.value;\r\n        dispatch(loginThunk({ email, password }))\r\n            .unwrap()\r\n            .then(() => resetFormFields())\r\n            .catch(() =>\r\n                toast.error(\r\n                    'Check if your e-mail and password are correct and try again...'\r\n                )\r\n            );\r\n    };\r\n\r\n    const isReadyToSubmit = () => Boolean(emailValue && pswValue);\r\n    const isReadyToReset = () => Boolean(emailValue || pswValue);\r\n\r\n    const resetFormFields = () => {\r\n        setEmailValue('');\r\n        setPswValue('');\r\n        localStorage.removeItem('logEmail');\r\n    };\r\n\r\n    return (\r\n        <FormBody autoComplete=\"off\" onSubmit={handleSubmit}>\r\n            <FormTitle>Enter your e-mail and password</FormTitle>\r\n\r\n            <Input\r\n                size=\"small\"\r\n                label=\"e-mail\"\r\n                name=\"email\"\r\n                type=\"text\"\r\n                placeholder=\"e-mail\"\r\n                value={emailValue}\r\n                onChange={handleInputChange}\r\n                inputProps={{\r\n                    pattern: '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,}$',\r\n                    title: 'the e-mail must contain the characters \"@\" ,\".\" and 2 or more characters after \".\"',\r\n                }}\r\n            />\r\n\r\n            <Input\r\n                size=\"small\"\r\n                label=\"password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"password\"\r\n                autoComplete=\"off\"\r\n                value={pswValue}\r\n                onChange={handleInputChange}\r\n                inputProps={{\r\n                    pattern: '.{7,}',\r\n                    title: 'password must be 7 characters or more',\r\n                }}\r\n            />\r\n            <FormButtonsWrapper>\r\n                <Button\r\n                    type=\"submit\"\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    disabled={!isReadyToSubmit()}\r\n                >\r\n                    Login\r\n                </Button>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    color=\"secondary\"\r\n                    onClick={resetFormFields}\r\n                    disabled={!isReadyToReset()}\r\n                >\r\n                    Reset\r\n                </Button>\r\n            </FormButtonsWrapper>\r\n            <AppToastContainer />\r\n        </FormBody>\r\n    );\r\n}\r\n","import styled from '@emotion/styled';\r\nimport Container from '../../components/common/Container/';\r\n\r\nexport const Main = styled.main`\r\n    width: 100%;\r\n    overflow: hidden;\r\n    height: calc(100vh - 69px);\r\n    padding-top: 70px;\r\n    background-color: #e7ebf0;\r\n`;\r\n\r\nexport const LoginPageContainer = styled(Container)`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n","import LoginForm from '../../components/LoginForm/';\r\nimport { Main, LoginPageContainer } from './LoginPage.styled';\r\n\r\nexport default function LoginPage() {\r\n    return (\r\n        <Main>\r\n            <LoginPageContainer>\r\n                <LoginForm />\r\n            </LoginPageContainer>\r\n        </Main>\r\n    );\r\n}\r\n"],"names":["AppToastContainer","position","autoClose","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","FormBody","styled","FormTitle","Input","TextField","FormButtonsWrapper","LoginForm","useState","emailValue","setEmailValue","pswValue","setPswValue","dispatch","useDispatch","handleInputChange","evt","target","name","value","localStorage","setItem","useEffect","restoredEmail","getItem","resetFormFields","removeItem","autoComplete","onSubmit","preventDefault","form","currentTarget","email","elements","toLowerCase","password","loginThunk","unwrap","then","catch","toast","size","label","type","placeholder","onChange","inputProps","pattern","title","Button","variant","disabled","Boolean","color","onClick","Main","LoginPageContainer","Container","LoginPage"],"sourceRoot":""}