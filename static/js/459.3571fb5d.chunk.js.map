{"version":3,"file":"static/js/459.3571fb5d.chunk.js","mappings":"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","sources":["components/AppToastContainer/AppToastContainer.jsx","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.styled.js","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function AppToastContainer() {\r\n    return (\r\n        <ToastContainer\r\n            position=\"top-right\"\r\n            autoClose={4500}\r\n            // hideProgressBar\r\n            newestOnTop={false}\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnFocusLoss={false}\r\n            draggable\r\n            pauseOnHover={false}\r\n            theme=\"light\"\r\n        />\r\n    );\r\n}\r\n","import styled from '@emotion/styled';\r\nimport { TextField } from '@mui/material';\r\n\r\nexport const FormBody = styled.form`\r\n    padding: 30px 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    row-gap: 15px;\r\n    border-radius: 10px;\r\n    background-color: #fff;\r\n    box-shadow: 0 0 0 1px rgba(3, 102, 214, 0.3) inset;\r\n`;\r\n\r\nexport const Input = styled(TextField)`\r\n    width: 400px;\r\n`;\r\n\r\nexport const FormTitle = styled.p`\r\n    padding: 0 0 25px 0;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    line-height: 1;\r\n    color: #1976d2;\r\n`;\r\n\r\nexport const FormButtonsWrapper = styled.div`\r\n    margin-top: 20px;\r\n    display: flex;\r\n    column-gap: 15px;\r\n`;\r\n","import { toast } from 'react-toastify';\r\nimport { Button } from '@mui/material';\r\nimport {\r\n    FormBody,\r\n    Input,\r\n    FormTitle,\r\n    FormButtonsWrapper,\r\n} from './RegisterForm.styled';\r\nimport { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { registerThunk } from '../../redux/operations-auth';\r\n\r\nexport default function RegisterForm() {\r\n    const dispatch = useDispatch();\r\n\r\n    const [nameValue, setNameValue] = useState('');\r\n    const [emailValue, setEmailValue] = useState('');\r\n    const [pswValue, setPswValue] = useState('');\r\n\r\n    const handleInputChange = evt => {\r\n        if (evt.target.name === 'name') {\r\n            setNameValue(evt.target.value);\r\n            localStorage.setItem('regName', evt.target.value);\r\n            return;\r\n        }\r\n        if (evt.target.name === 'email') {\r\n            setEmailValue(evt.target.value);\r\n            localStorage.setItem('regEmail', evt.target.value);\r\n\r\n            return;\r\n        }\r\n        if (evt.target.name === 'password') {\r\n            setPswValue(evt.target.value);\r\n            return;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const restoredName = localStorage.getItem('regName') ?? '';\r\n        const restoredEmail = localStorage.getItem('regEmail') ?? '';\r\n        setNameValue(restoredName);\r\n        setEmailValue(restoredEmail);\r\n    }, []);\r\n\r\n    const isReadyToSubmit = () => Boolean(nameValue && emailValue && pswValue);\r\n    const isReadyToReset = () => Boolean(nameValue || emailValue || pswValue);\r\n\r\n    const resetFormFields = () => {\r\n        setNameValue('');\r\n        setEmailValue('');\r\n        setPswValue('');\r\n        localStorage.removeItem('regName');\r\n        localStorage.removeItem('regEmail');\r\n    };\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        const form = evt.currentTarget;\r\n        const name = form.elements.name.value.trim();\r\n        const email = form.elements.email.value.toLowerCase();\r\n        const password = form.elements.password.value;\r\n        dispatch(registerThunk({ name, email, password }))\r\n            .unwrap()\r\n            .then(() => resetFormFields())\r\n            .catch(() =>\r\n                toast.error(\r\n                    'Something went wrong. For example check if the e-mail contains the characters \"@\" ,\".\" and 2 or more characters after \".\" Please try again'\r\n                )\r\n            );\r\n    };\r\n\r\n    return (\r\n        <FormBody autoComplete=\"off\" onSubmit={handleSubmit}>\r\n            <FormTitle>Fill out the registration form</FormTitle>\r\n            <Input\r\n                size=\"small\"\r\n                label=\"name\"\r\n                name=\"name\"\r\n                type=\"text\"\r\n                placeholder=\"name\"\r\n                value={nameValue}\r\n                onChange={handleInputChange}\r\n                inputProps={{\r\n                    pattern: '.{2,}',\r\n                    title: 'name must be 2 characters or more',\r\n                }}\r\n            />\r\n            <Input\r\n                size=\"small\"\r\n                label=\"e-mail\"\r\n                name=\"email\"\r\n                type=\"text\"\r\n                placeholder=\"e-mail\"\r\n                value={emailValue}\r\n                onChange={handleInputChange}\r\n                inputProps={{\r\n                    pattern: '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,}$',\r\n                    title: 'the e-mail must contain the characters \"@\" ,\".\" and 2 or more characters after \".\"',\r\n                }}\r\n            />\r\n\r\n            <Input\r\n                size=\"small\"\r\n                label=\"password\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"password\"\r\n                autoComplete=\"off\"\r\n                value={pswValue}\r\n                onChange={handleInputChange}\r\n                inputProps={{\r\n                    pattern: '.{7,}',\r\n                    title: 'password must be 7 characters or more',\r\n                }}\r\n            />\r\n            <FormButtonsWrapper>\r\n                <Button\r\n                    type=\"submit\"\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    disabled={!isReadyToSubmit()}\r\n                >\r\n                    Register\r\n                </Button>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    color=\"secondary\"\r\n                    disabled={!isReadyToReset()}\r\n                    onClick={resetFormFields}\r\n                >\r\n                    Reset\r\n                </Button>\r\n            </FormButtonsWrapper>\r\n        </FormBody>\r\n    );\r\n}\r\n","import styled from '@emotion/styled';\r\nimport Container from '../../components/common/Container/';\r\n\r\nexport const RegisterPageContainer = styled(Container)`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const Main = styled.main`\r\n    width: 100%;\r\n    overflow: hidden;\r\n    height: calc(100vh - 69px);\r\n    padding-top: 70px;\r\n    background-color: #e7ebf0;\r\n`;\r\n","import AppToastContainer from '../../components/AppToastContainer';\r\nimport RegisterForm from '../../components/RegisterForm/';\r\nimport { RegisterPageContainer, Main } from './RegisterPage.styled';\r\n\r\nexport default function RegisterPage() {\r\n    return (\r\n        <Main>\r\n            <RegisterPageContainer>\r\n                <RegisterForm />\r\n            </RegisterPageContainer>\r\n            <AppToastContainer />\r\n        </Main>\r\n    );\r\n}\r\n"],"names":["AppToastContainer","position","autoClose","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","FormBody","styled","Input","TextField","FormTitle","FormButtonsWrapper","RegisterForm","dispatch","useDispatch","useState","nameValue","setNameValue","emailValue","setEmailValue","pswValue","setPswValue","handleInputChange","evt","target","name","value","localStorage","setItem","useEffect","restoredName","getItem","restoredEmail","resetFormFields","removeItem","autoComplete","onSubmit","preventDefault","form","currentTarget","elements","trim","email","toLowerCase","password","registerThunk","unwrap","then","catch","toast","size","label","type","placeholder","onChange","inputProps","pattern","title","Button","variant","disabled","Boolean","color","onClick","RegisterPageContainer","Container","Main","RegisterPage"],"sourceRoot":""}